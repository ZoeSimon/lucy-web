pipeline {
    agent none
    options {
        disableResume()
    }
    stages {
        stage('Build') {
            agent { label 'build' }
            steps {
                script {
                    def filesInThisCommitAsString = sh(script:"git diff --name-only HEAD~1..HEAD | grep '^.jenkins/' || echo -n ''", returnStatus: false, returnStdout: true).trim()
                    def hasChangesInPath = (filesInThisCommitAsString.length() > 0)
                    echo "${filesInThisCommitAsString}"
                    if (!currentBuild.rawBuild.getCauses()[0].toString().contains('UserIdCause') && !hasChangesInPath){
                        currentBuild.rawBuild.delete()
                        error("No changes detected in the path ('^.jenkins/')")
                    }
                }
                echo "Aborting all running jobs ..."
                script {
                    abortAllPreviousBuildInProgress(currentBuild)
                }
                echo "BRANCH_NAME:${env.BRANCH_NAME}\nCHANGE_ID:${env.CHANGE_ID}\nCHANGE_TARGET:${env.CHANGE_TARGET}"
                echo "Building ..."
                sh "cd .jenkins/.pipeline && ./npmw ci && ./npmw run build -- --pr=${CHANGE_ID}"
            }
        }
	//Test update
        stage('Deploy (DEV)') {
            agent { label 'deploy' }
            steps {
                echo "Deploying ..."
                sh "cd .jenkins/.pipeline && ./npmw ci && DEBUG=info* ./npmw run deploy -- --pr=${CHANGE_ID} --env=dev"
            }
        }
        //Jon's import from mds
        podTemplate(label: 'owasp-zap', name: 'owasp-zap', serviceAccount: 'jenkins', cloud: 'openshift', containers: [
        containerTemplate(
            name: 'jnlp',
            image: '172.50.0.2:5000/openshift/jenkins-slave-zap',
            resourceRequestCpu: '500m',
            resourceLimitCpu: '1000m',
            resourceRequestMemory: '3Gi',
            resourceLimitMemory: '4Gi',
            workingDir: '/home/jenkins',
            command: '',
            args: '${computer.jnlpmac} ${computer.name}'
        )
        ]) {
        stage('ZAP Security Scan') {
            node('owasp-zap') {
                //the checkout is mandatory
                echo "checking out source"
                echo "Build: ${BUILD_ID}"
                checkout scm
                dir('zap') {
                    def retVal = sh returnStatus: true, script: '/zap/zap-baseline.py -r index.html -t <your url>'
                    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: '/zap/wrk', reportFiles: 'index.html', reportName: 'ZAP Full Scan', reportTitles: 'ZAP Full Scan'])
                    echo "Return value is: ${retVal}"
                    }
            }
        }
        }
        // stage ('ZAP (DEV)'){
        //     agent { label 'deploy' }
        //     steps {
        //         echo "ZAP (DEV)"
        //         sh 'unset JAVA_OPTS; openshift/pipeline/gradlew --no-build-cache --console=plain --no-daemon -b openshift/pipeline/build.gradle cd-zap -Pargs.--config=openshift/pipeline/config-dev.groovy -Pargs.--pr=${CHANGE_ID} -Pargs.--env=dev'
        //     }
        // }
        // stage('ZAP Security Scan') {
        //     node('owasp-zap') {
        //         //the checkout is mandatory
        //         echo "checking out source"
        //         echo "Build: ${BUILD_ID}"
        //         checkout scm
        //         dir('zap') {
        //             def retVal = sh returnStatus: true, script: '/zap/zap-baseline.py -r index.html -t <your url>'
        //             publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: '/zap/wrk', reportFiles: 'index.html', reportName: 'ZAP Full Scan', reportTitles: 'ZAP Full Scan'])
        //             echo "Return value is: ${retVal}"
        //             }
        //     }
        // }
        stage('Deploy (PROD)') {
            agent { label 'deploy' }
            input {
                message "Should we continue with deployment to PROD?"
                ok "Yes!"
            }
            steps {
                echo "Deploying ..."
                sh "cd .jenkins/.pipeline && ./npmw ci && ./npmw run deploy -- --pr=${CHANGE_ID} --env=prod"
            }
        }
        stage('Acceptance') {
            agent { label 'deploy' }
            input {
                message "Should we continue with cleanup?"
                ok "Yes!"
            }
            steps {
                echo "Cleaning ..."
            }
        }
    }
}
